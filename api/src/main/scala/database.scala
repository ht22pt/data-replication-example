package com.banno

import java.sql._
import scala.languageFeature.reflectiveCalls

trait Database extends DatabaseConfig {
  Class.forName("org.postgresql.Driver") //load driver

  def newConnection(): Connection = DriverManager.getConnection(databaseUrl, databaseUsername, databasePassword)

  def using[Closeable <: {def close(): Unit}, A](closeable: Closeable)(f: Closeable => A): A = 
    try {
      f(closeable)
    } finally {
      closeable.close()
    }

  def query[A](connection: Connection, sql: String)(process: ResultSet => A): A =
    using(connection) { connection => 
      using(connection.prepareStatement(sql)) { statement => 
        using(statement.executeQuery()) { results => 
          process(results)
        }
      }
    }

  def query[A](sql: String)(process: ResultSet => A): A = query(newConnection(), sql)(process)

  def queryOne[A](sql: String)(process: ResultSet => A): A = 
    query(sql) { results => 
      results.next()
      process(results)
    }

  def update(connection: Connection, sql: String): Int = 
    using(connection) { connection => 
      using(connection.prepareStatement(sql)) { statement => 
        statement.executeUpdate()
      }
    }

  def update(sql: String): Int = update(newConnection(), sql)

  def insert[Key](connection: Connection, sql: String)(processAutoGeneratedKeys: ResultSet => Key): Key = 
    using(connection) { connection => 
      using(connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) { statement => 
        statement.executeUpdate()
        using(statement.getGeneratedKeys()) { results => 
          processAutoGeneratedKeys(results)
        }
      }
    }

  def insert[Key](sql: String)(processAutoGeneratedKeys: ResultSet => Key): Key = insert(newConnection(), sql)(processAutoGeneratedKeys)

  def insertAndGetGeneratedId(sql: String): Long = insert(sql) { results => 
    results.next()
    results.getLong(1)
  }
}
